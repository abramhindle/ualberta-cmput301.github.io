<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CMPUT 301 - labs</title><link href="https://ualberta-cmput301.github.io/" rel="alternate"></link><link href="https://ualberta-cmput301.github.io/feeds/labs.atom.xml" rel="self"></link><id>https://ualberta-cmput301.github.io/</id><updated>2024-08-26T00:00:00-06:00</updated><subtitle>Software Engineering</subtitle><entry><title>Lab 5 Instructions</title><link href="https://ualberta-cmput301.github.io/labs/lab5_instruct.html" rel="alternate"></link><published>2024-08-26T00:00:00-06:00</published><updated>2024-08-26T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-26:/labs/lab5_instruct.html</id><summary type="html">&lt;p&gt;Lab 5 Instructions&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-5-instructions"&gt;Lab 5 Instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-5-instructions"&gt;Lab 5 Instructions&lt;/h3&gt;
&lt;p&gt;Read &lt;a href="https://ualberta-cmput301.github.io/labs/slides/Firestore.pdf"&gt;Firestore 🔥.pdf&lt;/a&gt; for introduction of Firestore
Follow instructions on &lt;a href="https://ualberta-cmput301.github.io/labs/slides/Lab5FInteg.pdf"&gt;Lab 5 Firestore Integration Instructions.pdf&lt;/a&gt; along with the TA.
Complete Lab Exercise.&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 5 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/lab5_part.html" rel="alternate"></link><published>2024-08-26T00:00:00-06:00</published><updated>2024-08-26T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-26:/labs/lab5_part.html</id><summary type="html">&lt;p&gt;Lab 5 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-5-participation-exercise"&gt;Lab 5 Participation Exercise&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#note-the-design-of-the-deletion-functionality-is-up-to-you-however-we-have-uploaded-a-few-mockups-to-give-you-some-ideas"&gt;Note: the design of the deletion functionality is up to you, however, we have uploaded a few mockups to give you some ideas.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-5-participation-exercise"&gt;Lab 5 Participation Exercise&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Due:&lt;/strong&gt; Friday, 9 February 2024, 4:00 PM&lt;/p&gt;
&lt;p&gt;Proper completion of this exercise is considered as part of course participation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this exercise it is your task to add the ability to delete Cities and integrate this functionality with the Firestore database, allowing for the persistence of deletions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After applying the changes in the lab demo &lt;a href="https://ualberta-cmput301.github.io/labs/slides/Lab5FInteg.pdf"&gt;(LINK TO INSTRUCTIONS)&lt;/a&gt; to &lt;a href="https://github.com/simpleParadox/CMPUT-301-CustomList"&gt;CustomList&lt;/a&gt;, add the ability to delete cities from the ListView and apply these same deletions to your instance of the Firestore database. If you have implemented this functionality correctly, restarting your app should not have an impact on what cities are displayed in your ListView after any addition or deletion actions.&lt;/p&gt;
&lt;h4 id="note-the-design-of-the-deletion-functionality-is-up-to-you-however-we-have-uploaded-a-few-mockups-to-give-you-some-ideas"&gt;&lt;strong&gt;Note: the design of the deletion functionality is up to you, however, we have uploaded a few mockups to give you some ideas.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Screen1" src="https://ualberta-cmput301.github.io/labs/lab5_img1.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen2" src="https://ualberta-cmput301.github.io/labs/lab5_img2.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen3" src="https://ualberta-cmput301.github.io/labs/lab5_img3.png" style="margin: 20px;" width="300"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When submitting, please upload the whole Android Studio Project Folder (not just the source files or the 'app' directory), and give it a unique name.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the Thursday lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 6 Instructions</title><link href="https://ualberta-cmput301.github.io/labs/lab6_instruct.html" rel="alternate"></link><published>2024-08-26T00:00:00-06:00</published><updated>2024-08-26T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-26:/labs/lab6_instruct.html</id><summary type="html">&lt;p&gt;Lab 6 Instructions&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-6-instructions"&gt;Lab 6 Instructions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#some-known-issues"&gt;Some known issues:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-6-instructions"&gt;Lab 6 Instructions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow the slides on Javadoc and JUnit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow instructions on this &lt;a href="https://ualberta-cmput301.github.io/labs/slides/L6Junit.pdf"&gt;link&lt;/a&gt; along with the TA.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete Lab Exercise.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="some-known-issues"&gt;Some known issues:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"test events were not received" --&amp;gt; Solution: &lt;a href="https://stackoverflow.com/a/73009440/1496554"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Erro creating JavaDoc" --&amp;gt; Solution: &lt;a href="https://stackoverflow.com/a/73102343/1496554"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 6 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/lab6_part.html" rel="alternate"></link><published>2024-08-26T00:00:00-06:00</published><updated>2024-08-26T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-26:/labs/lab6_part.html</id><summary type="html">&lt;p&gt;Lab 6 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-6-participation-exercise"&gt;Lab 6 Participation Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-6-participation-exercise"&gt;Lab 6 Participation Exercise&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Due:&lt;/strong&gt; Friday, 16 February 2024, 4:00 PM&lt;/p&gt;
&lt;p&gt;Proper completion of this exercise is considered as part of course participation.&lt;/p&gt;
&lt;p&gt;In this exercise your task is to &lt;strong&gt;implement and test&lt;/strong&gt; the following methods in the CityList class &lt;strong&gt;AND create Javadocs&lt;/strong&gt; for the main source files (not tests):&lt;/p&gt;
&lt;p&gt;1) Implement and test these methods:
    - hasCity(City city)
        - When given a city, return whether or not it belongs in the list&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;-&lt;/span&gt; Test to see whether your method is correct (Read https://www.infoworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html) delete(City city)

    &lt;span class="k"&gt;-&lt;/span&gt; Check if a city is present in the list. If it does then remove it from the list, if not then **throw an exception**

    &lt;span class="k"&gt;-&lt;/span&gt; Test to see if your method actually removes it from the list

    &lt;span class="k"&gt;-&lt;/span&gt; Test to see if the exception is actually thrown (Read more here https://howtodoinjava.com/junit5/expected-exception-example/) countCities()

    &lt;span class="k"&gt;-&lt;/span&gt; Return how many cities are in the list

    &lt;span class="k"&gt;-&lt;/span&gt;  Test to see whether your method is correct
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2) Add Javadocs to all methods in CityList class and City class &lt;strong&gt;AND&lt;/strong&gt; generate the javadocs to &lt;project-name&gt;/app/javadocs&lt;/p&gt;
&lt;p&gt;Submit the whole Project folder (not just source files or 'app')directory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the Thursday lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 7 Instructions</title><link href="https://ualberta-cmput301.github.io/labs/lab7_instruct.html" rel="alternate"></link><published>2024-08-26T00:00:00-06:00</published><updated>2024-08-26T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-26:/labs/lab7_instruct.html</id><summary type="html">&lt;p&gt;Lab 7 Instructions&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-7-instructions"&gt;Lab 7 Instructions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-topicdemo"&gt;Lab Topic/Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lab-exercise"&gt;Lab Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-7-instructions"&gt;Lab 7 Instructions&lt;/h3&gt;
&lt;h4 id="lab-topicdemo"&gt;&lt;strong&gt;Lab Topic/Demo&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ualberta-cmput301.github.io/labs/slides/L7IntentTesting.pdf"&gt;Lab7 Instructions-Android UI Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/iAniket23/Android-UI-testing"&gt;Lab 7 Starter Code&lt;/a&gt; (clone this repo)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="lab-exercise"&gt;&lt;strong&gt;Lab Exercise&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ualberta-cmput301.github.io/labs/lab7_part.html"&gt;Lab 7 Participation Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 7 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/lab7_part.html" rel="alternate"></link><published>2024-08-26T00:00:00-06:00</published><updated>2024-08-26T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-26:/labs/lab7_part.html</id><summary type="html">&lt;p&gt;Lab 7 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-7-participation-exercise"&gt;Lab 7 Participation Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-7-participation-exercise"&gt;Lab 7 Participation Exercise&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Due:&lt;/strong&gt; Friday, 1 March 2024, 4:00 PM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;# Implement and test activity:&lt;/strong&gt;
ShowActivity (create by yourself to have the following property)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- By clicking on the city list, the UI should change to another activity which is &amp;quot;ShowActivity&amp;quot;

- The activity shows the city name you have clicked on

- Create a back button which goes back to MainActivity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;# Test: (create 3 test cases/functions to test the 3 following functionalities)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- Check whether the activity correctly switched

- Test whether the city name is consistent

- Test the &amp;quot;back&amp;quot; button
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Submit the whole Project folder (not just source files or the 'app' directory)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screen1" src="https://ualberta-cmput301.github.io/labs/lab7_img1.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen2" src="https://ualberta-cmput301.github.io/labs/lab7_img2.png" style="margin: 20px;" width="300"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the Thursday lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 8 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/lab8_part.html" rel="alternate"></link><published>2024-08-26T00:00:00-06:00</published><updated>2024-08-26T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-26:/labs/lab8_part.html</id><summary type="html">&lt;p&gt;Lab 8 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-8-participation-exercise"&gt;Lab 8 Participation Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-8-participation-exercise"&gt;Lab 8 Participation Exercise&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Due:&lt;/strong&gt; Friday, 8 March 2024, 4:00 PM&lt;/p&gt;
&lt;p&gt;Lab Exercise&lt;/p&gt;
&lt;p&gt;• Implement has city, delete city, and count cities (same as lab 6), however, this time using TDD.&lt;/p&gt;
&lt;p&gt;• Create each functionality one at a time, creating (and pushing) a test to create a failing build, before adding functionality to make it pass.&lt;/p&gt;
&lt;p&gt;• e.g., create hasCity test, push for failing build, write functionality for hasCity to make passing build. Repeat for delete city and count cities.&lt;/p&gt;
&lt;p&gt;Please submit the link to your repo/fork.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the Thursday lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 1</title><link href="https://ualberta-cmput301.github.io/labs/lab1.html" rel="alternate"></link><published>2024-08-19T00:00:00-06:00</published><updated>2024-08-19T00:00:00-06:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-08-19:/labs/lab1.html</id><summary type="html">&lt;p&gt;Lab 1 -- Java, OOP, Android Studio&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instructions"&gt;Instructions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#walkthrough"&gt;Walkthrough&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#submission"&gt;Submission&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Due date:&lt;/strong&gt; Check the &lt;a href="https://ualberta-cmput301.github.io/#schedule"&gt;schedule&lt;/a&gt;. (Usually Friday after the lab at 4PM)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ualberta-cmput301.github.io/labs/slides/CMPUT_301_LAB_1.pdf"&gt;Lab 1 Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="requirements"&gt;Requirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Add three new model classes to LonelyTwitter: the first should be an abstract base class which represents the current mood. The second and third should be non-abstract classes which represent different moods (Ex: happy, sad, etc.) and inherit from the abstract class.&lt;/li&gt;
&lt;li&gt;Each mood should have a date and getters and setters to access the date.&lt;/li&gt;
&lt;li&gt;A constructor which sets the date to a default and a constructor which takes a date as an argument should be provided. &lt;/li&gt;
&lt;li&gt;Encapsulation should be followed.&lt;/li&gt;
&lt;li&gt;Each mood should have a method which returns a string representing that mood.&lt;/li&gt;
&lt;li&gt;Your new code should have examples of classes, methods, attributes, access modifiers, encapsulation, constructors, inheritance and abstract base classes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="instructions"&gt;Instructions&lt;/h3&gt;
&lt;p&gt;Download and install Android Studio from the official Android website&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/studio"&gt;https://developer.android.com/studio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check for specific installation guide unique to your Operating System&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/studio/install"&gt;https://developer.android.com/studio/install&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="walkthrough"&gt;Walkthrough&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a new LonelyTwitter project. Make sure that the project language is Java, not Kotlin!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create Tweet Class (Click &amp;gt; New &amp;gt; Java Class)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Make attributes (Date date &amp;amp; String message) (use alt+enter to include)&lt;ul&gt;
&lt;li&gt;Note: Access modifiers&lt;ul&gt;
&lt;li&gt;private= class only&lt;/li&gt;
&lt;li&gt;No modifier = within package&lt;/li&gt;
&lt;li&gt;protected = through inheritance&lt;/li&gt;
&lt;li&gt;public = everyone!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create two Constructors (one with the only Message and the other with Date+Message as arguments) and use Date = new Date() (current date and time) for the first constructor (the Default value for date).&lt;/li&gt;
&lt;li&gt;Note: Java Object Class (everything extends it, calls its constructor and it has built-in methods like toString())&lt;/li&gt;
&lt;li&gt;Note: the this keyword (message = message doesn't do anything!)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a regular tweet in LonelyTwitterActivity (pass in an empty string)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getters and setters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inheritance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make ImportantTweet child class (extends Tweet)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call super in both of ImportantTweet's constructors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now have access to the parent's methods and attributes. except constructors! (try and make an important Tweet)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ImportantTweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Super calls the parent's constructor (there is a hidden call to Object's constructor)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the Tweet to an ImportantTweet in LonelyTwitterActivity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Abstract Stuff&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make Tweet Class Abstract&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public abstract class Tweet { ... }&lt;/li&gt;
&lt;li&gt;public abstract Boolean isImportant();&lt;/li&gt;
&lt;li&gt;What if they need to behave differently? @Override isImportant() to create a compile-time check&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a NormalTweet class, could have many types of tweets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call super in both of  NormalTweet's constructors&lt;/li&gt;
&lt;li&gt;isImportant method should return Boolean.FALSE&lt;/li&gt;
&lt;li&gt;What if we want to use both in our list? (Implicit upcasting)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList&lt;Tweet&gt; tweetList = new ArrayList&lt;Tweet&gt;();
tweetList.add(normalTweet);&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Abstract method and base class so all the classes have the isImportant() method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An interface can also be used to force the use of some methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Tweetable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Make Tweet implement Tweetable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="submission"&gt;Submission&lt;/h3&gt;
&lt;p&gt;Note: Running the project is not necessary.&lt;/p&gt;
&lt;p&gt;Zip the project and upload it to eClass.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the Thursday lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 2 Instructions</title><link href="https://ualberta-cmput301.github.io/labs/lab2_instructions.html" rel="alternate"></link><published>2024-01-06T00:00:00-07:00</published><updated>2024-01-06T00:00:00-07:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-01-06:/labs/lab2_instructions.html</id><summary type="html">&lt;p&gt;Lab 2 Instructions&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-2-instructions"&gt;Lab 2 Instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-2-instructions"&gt;Lab 2 Instructions&lt;/h3&gt;
&lt;p&gt;In Lab 2, we'll be doing the following: &lt;/p&gt;
&lt;p&gt;Quick review of OOP principles
Android Basics (Lab 2 Android Basics PDF under Lab 2)
Displaying a list of items using ListView/ListAdapter (Lab 2 ListView Demo Example - Instructions PDF under Lab 2)
Lab Exercise - adding and removing items from ListAdapter (see the Lab 2 Participation Exercise page for more details)&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 2 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/lab2_participation.html" rel="alternate"></link><published>2024-01-06T00:00:00-07:00</published><updated>2024-01-06T00:00:00-07:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-01-06:/labs/lab2_participation.html</id><summary type="html">&lt;p&gt;Lab 2 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-2-participation-exercise"&gt;Lab 2 Participation Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-2-participation-exercise"&gt;Lab 2 Participation Exercise&lt;/h3&gt;
&lt;p&gt;Due: Friday, 19 January 2024, 4:00 PM
Note: Proper completion of this exercise is considered as part of course participation.&lt;/p&gt;
&lt;p&gt;Task: Modify/Expand ListyCity to allow for the addition of new cities as well as the deletion of existing ones in the ListView. The specifics of the design of this functionality are up to you.&lt;/p&gt;
&lt;p&gt;If you could not attend the labs or do not have the code for ListyCity, follow the instructions in Lab 2 ListView Example - Instructions. &lt;/p&gt;
&lt;p&gt;Hints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You may want to use the OnClickListener methods discussed in the lab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ideally you should consider treating the cities as objects, however, in this exercise it may not be necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some screenshots from an example application that demonstrate the required functionality. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your app does not need to look exactly like this demo！！！&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press "ADD CITY" then type the name and press "CONFIRM".          2. Tap a city name to select it and then press "DELETE CITY" to remove
This adds a new city name to the listview.                                               the city from the listview.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Screen1" src="https://ualberta-cmput301.github.io/labs/img1_lab2.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen2" src="https://ualberta-cmput301.github.io/labs/img2_lab2.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen3" src="https://ualberta-cmput301.github.io/labs/img3_lab2.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen4" src="https://ualberta-cmput301.github.io/labs/img1_lab2.png" style="margin: 20px;" width="300"&gt;&lt;/p&gt;
&lt;p&gt;You should submit your exercise as the project folder in the format of a zip archive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the Thursday lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 3 Instructions</title><link href="https://ualberta-cmput301.github.io/labs/lab3_inst.html" rel="alternate"></link><published>2024-01-06T00:00:00-07:00</published><updated>2024-01-06T00:00:00-07:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-01-06:/labs/lab3_inst.html</id><summary type="html">&lt;p&gt;Lab 3 Instructions&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-3-instructions-what-well-do-in-lab"&gt;Lab 3 Instructions - What we'll do in lab!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-3-instructions-what-well-do-in-lab"&gt;Lab 3 Instructions - What we'll do in lab!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Lab 3, together we'll go through the following:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Going through Lab 3 Slides PDF (customize ArrayAdapter and Fragments)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Supporting a ListView with items that have multiple views using a custom ArrayAdapter (&lt;strong&gt;Lab 3 Instructions - Part 1 Customize ListView&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a Fragment to add new cities to ListyCity (Lab 3 Instructions - Part 2 Fragments)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lab Exercise:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read about Java code conventions (see the Code Conventions (Schoepp) PDF).
Editing existing cities in ListyCity (see the Lab 3 Participation Exercise page for more details)&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 3 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/lab3_part.html" rel="alternate"></link><published>2024-01-06T00:00:00-07:00</published><updated>2024-01-06T00:00:00-07:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-01-06:/labs/lab3_part.html</id><summary type="html">&lt;p&gt;Lab 3 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-3-participation-exercise"&gt;Lab 3 Participation Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-3-participation-exercise"&gt;Lab 3 Participation Exercise&lt;/h3&gt;
&lt;p&gt;Due: Friday, 26 January 2024, 4:00 PM
Note: Proper completion of this exercise is considered as part of course participation.&lt;/p&gt;
&lt;p&gt;Task: Add functionality to ListyCity to allow editing an existing city. The specifics of the design of this functionality are up to you.&lt;/p&gt;
&lt;p&gt;If you could not attend the labs or do not have the code for the updated Lab 3 ListyCity, follow Lab 3 Instructions for ListyCity CustomList and then ListyCity Fragment. You can also download the "Lab 3 Demo" code from eClass.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your app does not need to look exactly like the screenshots. All that is required is the ability to edit an existing city. You can implement it and make it look like however you want.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screen1" src="https://ualberta-cmput301.github.io/labs/img1_lab3.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen2" src="https://ualberta-cmput301.github.io/labs/img2_lab3.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen3" src="https://ualberta-cmput301.github.io/labs/img3_lab3.png" style="margin: 20px;" width="300"&gt;
&lt;img alt="Screen4" src="https://ualberta-cmput301.github.io/labs/img4_lab3.png" style="margin: 20px;" width="300"&gt;&lt;/p&gt;
&lt;p&gt;Hints:
1. &lt;strong&gt;Add setters&lt;/strong&gt; to your City class so that you can modify its name and province.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You may need to &lt;strong&gt;pass the City object that is clicked in the Activity into the Fragment.&lt;/strong&gt; One way to do this is to &lt;strong&gt;make a constructor for the Fragment that takes in a City,&lt;/strong&gt; and &lt;strong&gt;store the City in the Fragment as an instance variable.&lt;/strong&gt; If you do this, make sure to also add an empty constructor to the Fragment so you can use it when adding a new City.
Another way you can send a City object from the Activity to the Fragment is by adding a &lt;strong&gt;"newInstance" method in the Fragment,&lt;/strong&gt; and use this method to create a new Fragment when editing a City. In this method, you &lt;strong&gt;take in a City and store it in the Fragment's Bundle object&lt;/strong&gt; (if you do this, &lt;strong&gt;make sure that your City class implements the "Serializable" interface, so that it can be saved into the Bundle&lt;/strong&gt;). Later on in your onCreateDialog method, you can &lt;strong&gt;access the Bundle using getArguments() and retrieve the City object there.&lt;/strong&gt; Note that storing data in a Bundle is similar to storing data in an Intent using key-value pairs. (This is the preferred way to do it in Android, because you usually should not have custom constructors for your Fragments. See here for more info).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example of a newInstance method in AddCityFragment (Hint #3) &lt;/p&gt;
&lt;p&gt;&lt;img alt="Screen5" src="https://ualberta-cmput301.github.io/labs/img5_lab3.png" style="margin: 20px;" width="300"&gt;&lt;/p&gt;
&lt;p&gt;You should submit your exercise solution as a zip or tar archive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 4 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/lab4_part.html" rel="alternate"></link><published>2024-01-06T00:00:00-07:00</published><updated>2024-01-06T00:00:00-07:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-01-06:/labs/lab4_part.html</id><summary type="html">&lt;p&gt;Lab 4 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lab-4-participation-exercise"&gt;Lab 4 Participation Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="lab-4-participation-exercise"&gt;Lab 4 Participation Exercise&lt;/h3&gt;
&lt;p&gt;Due: Friday, 2 February 2024, 4:00 PM
This task is for teams. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As a team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an Organization in GitHub and then create a repository (repo name: Team name) under this organization. &lt;/li&gt;
&lt;li&gt;Add your members as collaborators so the whole team will be able to commit to their branches.&lt;/li&gt;
&lt;li&gt;Create a new Android Studio project (1 project per team) with the same name as the repo name (Team name).&lt;/li&gt;
&lt;li&gt;Your android project folder is your local repository and write all the commands within this repo/directory.&lt;/li&gt;
&lt;li&gt;Use 'git init', 'git add', 'git commit', and 'git push' to push your code to the remote&lt;/li&gt;
&lt;li&gt;Use 'git remote add origin' to add the URL of your remote repo to this local repo.&lt;/li&gt;
&lt;li&gt;The repository should include .gitignore to not include Android Studio settings files (.idea) and the project build folder.&lt;/li&gt;
&lt;li&gt;Create an abstract class Shape (java file) with x and y  integer fields (as a team).&lt;/li&gt;
&lt;li&gt;Commit the change and push it to GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a member, on your local machine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Do not fork) Clone the repository and create a branch with your name (do not use CCID).&lt;/li&gt;
&lt;li&gt;Create a model class (ex. circle, rectangle, star, etc) (new java file) that extends Shape in your own branch.&lt;/li&gt;
&lt;li&gt;Commit the change and push the branch to GitHub.&lt;/li&gt;
&lt;li&gt;Create a pull request to main in Github.&lt;/li&gt;
&lt;li&gt;Ask another member to merge it.&lt;/li&gt;
&lt;li&gt;Edit the Shape class by adding a color string field. (String color = "blue";) (local your-own branch)&lt;/li&gt;
&lt;li&gt;Commit the change. (Don't push it)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a team:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit the Shape class in the main branch &lt;strong&gt;on GitHub&lt;/strong&gt; by adding a &lt;strong&gt;color&lt;/strong&gt; string field. (String color = "$PUT_YOUR_CHOICE_OF_COLOR";)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Commit the change in GitHub.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a member, on your local machine:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull the main branch from GitHub. You should have a conflict. (&lt;strong&gt;Origin/main -&amp;gt; local your-own&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Resolve the conflict.&lt;/li&gt;
&lt;li&gt;Commit the change.&lt;/li&gt;
&lt;li&gt;Push the branch to GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please submit:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your CCID (not your student id number!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Link to your branch in the repository at eClass&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Due Date&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friday after the Thursday lab at 4PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Lab 4 Participation Exercise</title><link href="https://ualberta-cmput301.github.io/labs/past_notes.html" rel="alternate"></link><published>2024-01-06T00:00:00-07:00</published><updated>2024-01-06T00:00:00-07:00</updated><author><name>Samuel Iwuchukwu</name></author><id>tag:ualberta-cmput301.github.io,2024-01-06:/labs/past_notes.html</id><summary type="html">&lt;p&gt;Lab 4 Participation Exercise&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#past-lab-git-notes-romansky"&gt;PAST Lab Git Notes (Romansky)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="past-lab-git-notes-romansky"&gt;PAST Lab Git Notes (Romansky)&lt;/h3&gt;
&lt;p&gt;Preliminaries: Git has two modes it runs in. You can run it as a client which
is what most uses will be. Or, you can run it as a server service. Github
runs git as a service. As a client, you can connect your computer to the
service. The computer offering git as a service is after referred to as a
remote, or remote computer.
You should setup a Github account for this course.
Your Github account should be professional. Please be safe for work!
Your git repositories in this class should all use a FOSS license!
You can read about .gitignore files if you want git to ignore files matching
regular expressions like backup files that end in a ~.&lt;/p&gt;
&lt;p&gt;cmd: git config --global user.name "yourUserName"
cmd: git config --global user.email "your@email.com"
cmd: git config --global core.editor nano
cmd: git config --list
description: these commands setup your workstation git configurations which
will be associated with each of the file changes you make through git. So, you
should set them before you do anything.&lt;/p&gt;
&lt;p&gt;cmd: git clone &lt;repository address&gt;
description: allows a developer to make a copy of a git repository from a remote
location to the developers local work station.
example: git clone https://github.com/bpython/bpython.git
result: makes a copy of the bpython repo on your computer!&lt;/p&gt;
&lt;p&gt;cmd: git branch &lt;branch-name&gt;
description: create a new code branch. The new branch will contain a copy
of the current branches code.
example: git branch bug444
result: creates a branch named bug444&lt;/p&gt;
&lt;p&gt;cmd: git branch -a
description: shows all current branches associated with the current working
repo. This will list branches that exist on the local work station and the
remote repositories associated with the repo.&lt;/p&gt;
&lt;p&gt;cmd: git push -u origin &lt;branch&gt;
description: this will push a local branch to a given remote git service.
You have to run this command when you make a new local branch that you would
also like to track on the remote server.&lt;/p&gt;
&lt;p&gt;cmd: git add &lt;file&gt;
cmd: git rm &lt;file&gt;
description: add or remove a file from gits file tracking system&lt;/p&gt;
&lt;p&gt;cmd: git status
description: print the current changes that git can track or is not tracking&lt;/p&gt;
&lt;p&gt;cmd: git checkout &lt;branch_name&gt;
cmd: git checkout --branch &lt;branch_name&gt;
description: git checkout lets you change which branch you are working in. The
latter usage changes your current branch and creates a new branch with the
given name.&lt;/p&gt;
&lt;p&gt;cmd: git merge &lt;branch_name&gt;
description: git merge will take a given branch name and merge it into your
current working branch. This is useful if you would like to grab features from
another branch of code.&lt;/p&gt;
&lt;p&gt;cmd: git pull
cmd: git push
description: fetch the latest commits from origin, or push your latest changes
to origin&lt;/p&gt;
&lt;p&gt;Other commands, git remote, git rebase, and git fetch&lt;/p&gt;
&lt;p&gt;Last modified: Tuesday, 3 September 2019, 11:58 PM&lt;/p&gt;</content><category term="labs"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry></feed>